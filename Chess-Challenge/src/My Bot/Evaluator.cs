using ChessChallenge.API;
using System;

public class Evaluator : IEvaluator
{
    //int[] psTables = { 100, 100, 100, 100, 100, 100, 100, 100, 150, 150, 150, 150, 150, 150, 150, 150, 110, 110, 120, 130, 130, 120, 110, 110, 105, 105, 110, 125, 125, 110, 105, 105, 100, 100, 100, 120, 120, 100, 100, 100, 105, 95, 90, 100, 100, 90, 95, 105, 105, 110, 110, 80, 80, 110, 110, 105, 100, 100, 100, 100, 100, 100, 100, 100, 250, 260, 270, 270, 270, 270, 260, 250, 260, 280, 300, 300, 300, 300, 280, 260, 270, 300, 310, 315, 315, 310, 300, 270, 270, 305, 315, 320, 320, 315, 305, 270, 270, 300, 315, 320, 320, 315, 300, 270, 270, 305, 310, 315, 315, 310, 305, 270, 260, 280, 300, 305, 305, 300, 280, 260, 250, 260, 270, 270, 270, 270, 260, 250, 330, 340, 340, 340, 340, 340, 340, 330, 340, 350, 350, 350, 350, 350, 350, 340, 340, 350, 355, 360, 360, 355, 350, 340, 340, 355, 355, 360, 360, 355, 355, 340, 340, 350, 360, 360, 360, 360, 350, 340, 340, 360, 360, 360, 360, 360, 360, 340, 340, 355, 350, 350, 350, 350, 355, 340, 330, 340, 340, 340, 340, 340, 340, 330, 500, 500, 500, 500, 500, 500, 500, 500, 505, 510, 510, 510, 510, 510, 510, 505, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 500, 500, 500, 505, 505, 500, 500, 500, 880, 890, 890, 895, 895, 890, 890, 880, 890, 900, 900, 900, 900, 900, 900, 890, 890, 900, 905, 905, 905, 905, 900, 890, 895, 900, 905, 905, 905, 905, 900, 895, 900, 900, 905, 905, 905, 905, 900, 895, 890, 905, 905, 905, 905, 905, 900, 890, 890, 900, 905, 900, 900, 900, 900, 890, 880, 890, 890, 895, 895, 890, 890, 880, 9920, 9930, 9930, 9930, 9930, 9930, 9930, 9920, 9940, 9940, 9940, 9940, 9940, 9940, 9940, 9940, 9960, 9950, 9950, 9940, 9940, 9950, 9950, 9960, 9970, 9960, 9960, 9950, 9950, 9960, 9960, 9970, 9980, 9970, 9970, 9960, 9960, 9970, 9970, 9980, 9990, 9980, 9980, 9980, 9980, 9980, 9980, 9990, 10020, 10020, 9995, 9995, 9995, 9995, 10020, 10020, 10020, 10030, 10010, 10000, 10000, 10010, 10030, 10020, 100, 100, 100, 100, 100, 100, 100, 100, 180, 180, 180, 180, 180, 180, 180, 180, 150, 150, 150, 150, 150, 150, 150, 150, 130, 130, 130, 130, 130, 130, 130, 130, 120, 120, 120, 120, 120, 120, 120, 120, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 100, 100, 100, 100, 100, 100, 100, 100, 250, 260, 270, 270, 270, 270, 260, 250, 260, 280, 300, 300, 300, 300, 280, 260, 270, 300, 310, 315, 315, 310, 300, 270, 270, 305, 315, 320, 320, 315, 305, 270, 270, 300, 315, 320, 320, 315, 300, 270, 270, 305, 310, 315, 315, 310, 305, 270, 260, 280, 300, 305, 305, 300, 280, 260, 250, 260, 270, 270, 270, 270, 260, 250, 330, 340, 340, 340, 340, 340, 340, 330, 340, 350, 350, 350, 350, 350, 350, 340, 340, 350, 355, 360, 360, 355, 350, 340, 340, 355, 355, 360, 360, 355, 355, 340, 340, 350, 360, 360, 360, 360, 350, 340, 340, 360, 360, 360, 360, 360, 360, 340, 340, 355, 350, 350, 350, 350, 355, 340, 330, 340, 340, 340, 340, 340, 340, 330, 500, 500, 500, 500, 500, 500, 500, 500, 505, 510, 510, 510, 510, 510, 510, 505, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 495, 500, 500, 500, 500, 500, 500, 495, 500, 500, 500, 505, 505, 500, 500, 500, 880, 890, 890, 895, 895, 890, 890, 880, 890, 900, 900, 900, 900, 900, 900, 890, 890, 900, 905, 905, 905, 905, 900, 890, 895, 900, 905, 905, 905, 905, 900, 895, 900, 900, 905, 905, 905, 905, 900, 895, 890, 905, 905, 905, 905, 905, 900, 890, 890, 900, 905, 900, 900, 900, 900, 890, 880, 890, 890, 895, 895, 890, 890, 880, 9980, 9990, 9990, 9990, 9990, 9990, 9990, 9980, 9995, 10000, 10005, 10005, 10005, 10005, 10000, 9995, 9990, 9995, 10020, 10030, 10030, 10020, 9995, 9990, 9985, 9990, 10035, 10045, 10045, 10035, 9990, 9985, 9980, 9985, 10030, 10040, 10040, 10030, 9985, 9980, 9975, 9980, 10020, 10025, 10025, 10020, 9980, 9975, 9970, 9975, 10000, 10000, 10000, 10000, 9975, 9970, 9950, 9970, 9970, 9970, 9970, 9970, 9970, 9950 };

    /*public Evaluator()
    {
        ulong[] result = new ulong[2 * 6 * 8];
        int max = int.MinValue;
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                for (int k = 0; k < 8; k++)
                {
                    for (int l = 4 - 1; l >= 0; l--)
                    {
                        int oldIndex = i * 6 * 64 + j * 64 + k * 8 + l;
                        max = Math.Max((psTables[oldIndex] / 10), max);
                        int newIndex = i * 6 * 8 + j * 8 + k;
                        result[newIndex] = (result[newIndex] << 10) + (ulong)(psTables[oldIndex] / 10);
                    }
                }
            }
        }
        Console.WriteLine(max);
        File.WriteAllText("psTableLong.json", JsonSerializer.Serialize<ulong[]>(result));
    }*/

    ulong[] psTables = { 10747914250, 16121871375, 13971237899, 12896446474, 12895397898, 10746864650, 8601480202, 10747914250, 29019367449, 32243740698, 33318533147, 34392274971, 34392274971, 33318533147, 32243740698, 29019367449, 36542908449, 37617699874, 38691441698, 38691441698, 38692490274, 38692491298, 37617699874, 36542908449, 53739571250, 54814362674, 53739571249, 53739571249, 53739571249, 53739571249, 53739571249, 53739571250, 95656436824, 96731228249, 96731228249, 96731228249, 96731228250, 96731228249, 96731228249, 95656436824, 1067267885024, 1068342676450, 1068343726052, 1069418517477, 1070493308902, 1072641842151, 1073716636650, 1074792476650, 10747914250, 19346245650, 16121871375, 13972288525, 12897497100, 11822705675, 11822705675, 10747914250, 29019367449, 32243740698, 33318533147, 34392274971, 34392274971, 33318533147, 32243740698, 29019367449, 36542908449, 37617699874, 38691441698, 38691441698, 38692490274, 38692491298, 37617699874, 36542908449, 53739571250, 54814362674, 53739571249, 53739571249, 53739571249, 53739571249, 53739571249, 53739571250, 95656436824, 96731228249, 96731228249, 96731228249, 96731228250, 96731228249, 96731228249, 95656436824, 1073716633574, 1074791424999, 1078014746599, 1079089536998, 1079089535974, 1076941003749, 1074791421925, 1071567050723 };

    readonly int[] phase_weight = { 0, 1, 1, 2, 4, 0 };

    public int Evaluate(Board board, Timer timer)
    {
        int middlegame = 0, endgame = 0, gamephase = 0, sideToMove = 2;
        for (; --sideToMove >= 0;)
        {
            for (int piece = -1, square; ++piece < 6;)
                for (ulong mask = board.GetPieceBitboard((PieceType)piece + 1, sideToMove > 0); mask != 0;)
                {
                    // Gamephase, middlegame -> endgame
                    gamephase += phase_weight[piece];

                    // Material and square evaluation
                    square = BitboardHelper.ClearAndGetIndexOfLSB(ref mask) ^ 56 * sideToMove;
                    middlegame += getPS(0, piece, square);
                    endgame += getPS(1, piece, square);
                }
            middlegame = -middlegame;
            endgame = -endgame;
        }
        return (middlegame * gamephase + endgame * (24 - gamephase)) / 24 * (board.IsWhiteToMove ? 1 : -1);
    }

    private int getPS(int mg, int piece, int square)
    {
        return (int)(1023ul & (psTables[mg * 48 + piece * 8 + square / 8] >> (10 * Math.Min(square % 8, 7 - square % 8)))) * 10;
    }
}